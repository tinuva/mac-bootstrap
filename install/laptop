#!/usr/bin/env bash

# Adpated from thoughtbot's laptop script.
# https://github.com/thoughtbot/laptop

laptop_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n[LAPTOP] $fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/bin/" ]; then
  mkdir "$HOME/bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  laptop_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    laptop_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  laptop_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  laptop_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

laptop_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
#tap "homebrew/cask-cask" #tap "caskroom/cask"
tap "homebrew/cask-fonts" #tap "caskroom/fonts"
tap "homebrew/cask-versions" #tap "caskroom/versions"
tap "homebrew/bundle"
tap "homebrew/core"
tap "homebrew/services"
tap "thoughtbot/formulae"
tap "universal-ctags/universal-ctags"
tap "teamookla/speedtest"

# Need to install openssl before libyaml
brew "openssl"
brew "openssl@1.1" # wget dependency

brew "autoconf" # asdf dependency
brew "automake" # asdf dependency
brew "awscli"
brew "bash"
brew "bash-completion"
brew "cloc"
brew "cmake"
brew "coreutils"
brew "diff-so-fancy"
brew "dockutil"
brew "dos2unix"
brew "git"
brew "git-quick-stats"
brew "gmp" # Vim dependency
brew "gpg" # asdf-nodejs dependency
brew "htop"
brew "iftop"
brew "imagemagick"
brew "libtool" # asdf dependency
brew "libxslt" # asdf dependency
brew "libyaml" # asdf dependency
brew "mtr"
brew "neovim"
brew "overmind"
brew "pandoc"
brew "perl"
brew "pgcli"
brew "postgresql", restart_service: true
brew "python"
brew "python3"
brew "readline"
brew "reattach-to-user-namespace"
brew "rsync"
brew "shellcheck"
brew "speedtest", force: true
brew "sqlite"
brew "ssh-copy-id"
brew "the_silver_searcher"
brew "thoughtbot/formulae/gitsh"
brew "tmux"
brew "tree"
brew "universal-ctags/universal-ctags/universal-ctags", args: ["HEAD"]
brew "unixodbc" # asdf dependency
brew "wget"
brew "xz"
brew "yarn", args: ["ignore-dependencies"]
brew "zsh"

# homebrew-cask
# https://github.com/caskroom/homebrew-cask
cask_args appdir: "/Applications"
#cask "firefox"
#cask "google-chrome"
cask "iterm2"
#cask "vivaldi"
cask "gimp"
#cask "visual-studio-code"
cask "brave-browser"
cask "vscodium"
EOF

sudo chown root /usr/local/sbin/mtr
sudo chown root /usr/local/sbin/mtr-packet
sudo chmod 4555 /usr/local/sbin/mtr-packet

sudo chown root /usr/local/sbin/iftop
sudo chmod 4555 /usr/local/sbin/iftop

# allow apps from anywhere
### See: https://www.howtogeek.com/205393/gatekeeper-101-why-your-mac-only-allows-apple-approved-software-by-default/
sudo spctl --master-disable

# VSCode / Codium extensions
code --install-extension fede-crc.thanatos # Thanatos theme
code --install-extension hookyqr.beautify
code --install-extension streetsidesoftware.code-spell-checker
code --install-extension ms-azuretools.vscode-docker
code --install-extension esbenp.prettier-vscode
code --install-extension ms-python.python
code --install-extension ms-vscode-remote.remote-containers
code --install-extension ms-vscode-remote.remote-ssh
code --install-extension ms-vscode-remote.remote-ssh-edit
code --install-extension ms-vscode-remote.remote-wsl
code --install-extension ms-vscode-remote.vscode-remote-extensionpack
code --install-extension rafaelmaiolla.remote-vscode

# set back
sudo spctl --master-enable

# Set theme for VSCodium
#mkdir -p ~/Library/Application\ Support/VSCodium/User

cat >~/Library/Application\ Support/VSCodium/User/settings.json  <<EOL
{
    "[json]": {
        "editor.defaultFormatter": "HookyQR.beautify"
    },
    "editor.wordWrap": "on",
    "workbench.colorTheme": "Thanatos"
}
EOL

laptop_echo "Configuring asdf version manager..."
if [ ! -d "$HOME/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.6.0
  append_to_zshrc "source $HOME/.asdf/asdf.sh" 1
fi

install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  fi
}

# shellcheck disable=SC1090
source "$HOME/.asdf/asdf.sh"
install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

install_asdf_language() {
  local language="$1"
  local version="$2"
  asdf install "$language" "$version"
  asdf global "$language" "$version"
}

# laptop_echo "Installing latest Ruby..."
# cat << EOF > "$HOME"/.default-gems
# bundler
# haml_lint
# neovim
# pry
# rubocop
# tmuxinator
# EOF
# install_asdf_language "ruby" "$ASDF_RUBY_VERSION"
# laptop_echo "Checking which Ruby and Gem installs we are using at this point..."
# echo "Ruby --> $(command -v ruby)"
# ruby -v
# echo "Gem --> $(command -v gem)"
# gem -v
# gem update --system
# number_of_cores=$(sysctl -n hw.ncpu)
# bundle config --global jobs $((number_of_cores - 1))

laptop_echo "Installing latest Node..."
PATH="$PATH:$ASDF_DIR/installs/nodejs/$ASDF_NODEJS_VERSION/bin"
cat << EOF > "$HOME"/.default-npm-packages
neovim
create-react-app
vue-cli
EOF
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs" "$ASDF_NODEJS_VERSION"
echo "Node --> $(command -v node)"
node -v
echo "NPM --> $(command -v npm)"
npm -v

npm install -g gulp-cli
# npm install -g neovim
# npm install -g pug
npm install -g standard
npm install -g stylelint
# npm install -g svgo
# npm install -g vue-cli

# laptop_echo "Installing Python support for Neovim..."
# echo "Python 2 --> $(command -v python)"
# python --version
# echo "Python 3 --> $(command -v python3)"
# python3 --version
# sudo easy_install pip
# pip install --user --upgrade pynvim
# pip3 install --user --upgrade pynvim
